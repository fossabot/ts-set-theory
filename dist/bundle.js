(()=>{"use strict";var e={891:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){for(const n of e)for(const e of t)if(n===e)return!1;return!0}},73:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=i(n(181));t.default=function(e,t){return e.size===t.size&&(0,u.default)(e,t)}},65:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e.size===t.size}},181:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){for(const n of t)if(!e.has(n))return!1;return!0}},937:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){const n=new Set(e);for(const e of t)n.delete(e);return n}},797:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){const n=new Set;for(const i of t)e.has(i)&&n.add(i);return n}},2:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(607);t.default=function(e,t){return(0,i.getUnion)((0,i.getDifference)(e,t),(0,i.getDifference)(t,e))}},268:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){const n=new Set(e);for(const e of t)n.add(e);return n}},607:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getSorensenDiceCoefficient=t.getOverlapCoefficient=t.getLogDice=t.getJaccardSimilarityCoefficient=t.isSupersetOf=t.isSubsetOf=t.isProperSupersetOf=t.isProperSubsetOf=t.getUnion=t.getSymmetricDifference=t.getIntersection=t.getDifference=t.areSetsEquivalent=t.areSetsEqual=t.areSetsDisjoint=void 0;const u=i(n(891));t.areSetsDisjoint=u.default;const r=i(n(73));t.areSetsEqual=r.default;const o=i(n(65));t.areSetsEquivalent=o.default;const f=i(n(937));t.getDifference=f.default;const s=i(n(797));t.getIntersection=s.default;const c=i(n(2));t.getSymmetricDifference=c.default;const a=i(n(268));t.getUnion=a.default;const l=i(n(149));t.isProperSubsetOf=l.default;const d=i(n(85));t.isProperSupersetOf=d.default;const _=i(n(648));t.isSubsetOf=_.default;const p=i(n(343));t.isSupersetOf=p.default;var v=n(339);Object.defineProperty(t,"getJaccardSimilarityCoefficient",{enumerable:!0,get:function(){return v.getJaccardSimilarityCoefficient}}),Object.defineProperty(t,"getLogDice",{enumerable:!0,get:function(){return v.getLogDice}}),Object.defineProperty(t,"getOverlapCoefficient",{enumerable:!0,get:function(){return v.getOverlapCoefficient}}),Object.defineProperty(t,"getSorensenDiceCoefficient",{enumerable:!0,get:function(){return v.getSorensenDiceCoefficient}})},149:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=i(n(181));t.default=function(e,t){return e.size<t.size&&(0,u.default)(t,e)}},85:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=i(n(181));t.default=function(e,t){return e.size>t.size&&(0,u.default)(e,t)}},648:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=i(n(181));t.default=function(e,t){return e.size<=t.size&&(0,u.default)(t,e)}},343:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=i(n(181));t.default=function(e,t){return e.size>=t.size&&(0,u.default)(e,t)}},502:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=i(n(797)),r=i(n(268));t.default=function(e,t){return 0===e.size||0===t.size?1:(0,u.default)(e,t).size/(0,r.default)(e,t).size}},303:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=i(n(195));t.default=function(e,t){return 14+Math.log2((0,u.default)(e,t))}},805:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=i(n(797));t.default=function(e,t){return(0,u.default)(e,t).size/Math.min(e.size,t.size)}},195:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const u=i(n(797));t.default=function(e,t){return 2*(0,u.default)(e,t).size/(e.size+t.size)}},339:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getSorensenDiceCoefficient=t.getOverlapCoefficient=t.getLogDice=t.getJaccardSimilarityCoefficient=void 0;const u=i(n(502));t.getJaccardSimilarityCoefficient=u.default;const r=i(n(303));t.getLogDice=r.default;const o=i(n(805));t.getOverlapCoefficient=o.default;const f=i(n(195));t.getSorensenDiceCoefficient=f.default}},t={};!function n(i){var u=t[i];if(void 0!==u)return u.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,